# https://alacritty.org/config-alacritty.html

import = []
# import = [
# "~/.config/alacritty/base16-dark.toml",
# "~/.config/alacritty/keybindings.toml",
# ]

# shell = "<string>" | { program = "<string>", args = ["<string>",] }
# [shell]
# program = "/bin/zsh"
# args = ["-l"]

working_directory = "C:/Users/Jack"

# Live config reload (changes require restart)
# live_config_reload = true

# ipc_socket = true # (unix only)

# All key-value pairs in the [env] section
# will be added as environment variables for any process spawned by Alacritty,
# including its shell. Some entries may override variables set by alacritty itself.
[env]

[window]
dimensions = {columns = 120, lines = 30}
position = "None"
padding = {x = 0, y = 0}
dynamic_padding = false
# Window decorations
# Full
#   Borders and title bar.
# None Neither
#   borders nor title bar.
# Transparent (macOS only)
#   Title bar, transparent background and title bar buttons.
# Buttonless (macOS only)
#   Title bar, transparent background and no title bar buttons.
decorations = "Full"
# Background opacity as a floating point number from 0.0 to 1.0. The value 0.0 is
# completely transparent and 1.0 is opaque.
opacity = 1.0
# Request compositor to blur content behind transparent windows.
blur = false # (works on macOS/KDE Wayland)
# Startup mode (changes require restart)
# Windowed
#   Regular window.
# Maximized
#   The window will be maximized on startup.
# Fullscreen
#   The window will be fullscreened on startup.
# SimpleFullscreen (macOS only)
#   Same as Fullscreen, but you can stack windows on top.
startup_mode = "Windowed"
title = "Alacritty"
# Allow terminal applications to change Alacritty's window title
dynamic_title = true
# Window class.
# On Wayland, general is used as app_id and instance is ignored.
class = {instance = "Alacritty", general = "Alacritty"} # (Linux/BSD only)
# Override the variant of the System theme/GTK theme/Wayland client side decorations.
# Set this to "None" to use the system's default theme variant.
# Dark Light None
decorations_theme_variant  = "None"
# Prefer resizing window by discrete steps equal to cell dimensions.
resize_increments = false
# Make Option key behave as Alt.
# option_as_alt = "OnlyLeft" | "OnlyRight" | "Both" | "None" # (macos only)
option_as_alt  = "None" # macos only

[scrolling]
# Maximum number of lines in the scrollback buffer.
# Specifying 0 will disable scrolling.
# Limited to 100000.
history = 10000
# Number of line scrolled for every input scroll increment.
multiplier = 3

[font]
# Linux/BSD: { family = "monospace", style = "Regular" }
# Windows: { family = "Consolas", style = "Regular" }
# macOS: { family = "Menlo", style = "Regular" }
normal = { family = "MonaspiceRn Nerd Font Mono", style = "Light" }

# If the family is not specified, it will fall back to the value specified for the normal font.
# Default: { style = "Bold" }
# bold = { family = "<string>", style = "<string>" }

# If the family is not specified, it will fall back to the value specified for the normal font.
# Default: { style = "Italic" }
# italic = { family = "<string>", style = "<string>" }

# If the family is not specified, it will fall back to the value specified for the normal font.
# Default: { style = "Bold Italic" }
# bold_italic = { family = "<string>", style = "<string>" }

# Font size in points.
size = 11.25

# Offset is the extra space around each character. y can be thought of as modifying the
# line spacing, and x as modifying the letter spacing.
offset = { x = 0, y = 0 }

# Glyph offset determines the locations of the glyphs within their cells with the default
# being at the bottom. Increasing x moves the glyph to the right, increasing y moves the
# glyph upward.
#glyph_offset = { x = <integer>, y = <integer> }

# When true, Alacritty will use a custom built-in font for box drawing characters (Unicode
# points U+2500 - U+259F) and powerline symbols (Unicode points U+E0B0 - U+E0B3).
builtin_box_drawing = true

[colors.primary]
foreground = "#d8d8d8"
background = "#181818"
# If this is not set, the color is automatically calculated based on the foreground color.
dim_foreground = "#828482"
# This color is only used when draw_bold_text_with_bright_colors is true.
# If this is not set, the normal foreground will be used.
bright_foreground = "None"

[colors]
# Colors which should be used to draw the terminal cursor.
# Allowed values are hexadecimal colors like #ff00ff, or CellForeground/CellBackground,
#  which references the affected cell
cursor = { text = "CellBackground", cursor = "CellForeground" }
# Colors for the cursor when the vi mode is active.
# Allowed values are hexadecimal colors like #ff00ff, or CellForeground/CellBackground,
#  which references the affected cell.
vi_mode_cursor = { text = "CellBackground", cursor = "CellForeground" }
# Color used for the indicator displaying the position in history during search and vi mode.
# Setting this to "None" will use the opposing primary color.
line_indicator = { foreground = "None", background = "None" }
# Color used for the footer bar on the bottom, used by search regex input, hyperlink URI preview, etc.
footer_bar = { foreground = "#181818", background = "#d8d8d8" }
# Colors used for drawing selections.
# Allowed values are hexadecimal colors like #ff00ff, or CellForeground/CellBackground,
#  which references the affected cell.
selection = { text = "CellBackground", background = "CellForeground" }
# The indexed colors include all colors from 16 to 256. When these are not set, they're
#  filled with sensible defaults.
# indexed_colors = [{ index = <integer>, color = "<string>" },]
indexed_colors = []
# Whether or not window.opacity applies to all cell backgrounds, or only to the default
#  background. When set to true all cells will be transparent regardless of their background color.
transparent_background_colors = true
# When true, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors = true

[colors.search]
matches = { foreground = "#181818", background = "#ac4242" }
focused_match = { foreground = "#181818", background = "#f4bf75" }

[colors.hints]
# First character in the hint label.
# Allowed values are hexadecimal colors like #ff00ff, or
#  CellForeground/CellBackground, which references the affected cell.
start = { foreground = "#181818", background = "#f4bf75" }
# All characters after the first one in the hint label.
# Allowed values are hexadecimal colors like #ff00ff, or
#  CellForeground/CellBackground, which references the affected cell.
end = { foreground = "#181818", background = "#ac4242" }

[colors.normal]
black = "#181818"
red = "#ac4242"
green = "#90a959"
yellow = "#f4bf75"
blue = "#6a9fb5"
magenta = "#aa759f"
cyan = "#75b5aa"
white = "#d8d8d8"

[colors.bright]
black = "#6b6b6b"
red = "#c55555"
green = "#aac474"
yellow = "#feca88"
blue = "#82b8c8"
magenta = "#c28cb8"
cyan = "#93d3c3"
white = "#f8f8f8"

[colors.dim]
black = "#0f0f0f"
red = "#712b2b"
green = "#5f6f3a"
yellow = "#a17e4d"
blue = "#456877"
magenta = "#704d68"
cyan = "#4d7770"
white = "#8e8e8e"

[bell]
# Visual bell animation effect for flashing the screen when the visual bell is rung.
# animation = "Ease" | "EaseOut" | "EaseOutSine" | "EaseOutQuad" | "EaseOutCubic" |
#  "EaseOutQuart" | "EaseOutQuint" | "EaseOutExpo" | "EaseOutCirc" | "Linear"
animation = "Linear"
# Duration of the visual bell flash in milliseconds. A `duration` of `0` will disable
#  the visual bell animation.
duration = 0
# Visual bell animation color.
color = "#ffffff"
# This program is executed whenever the bell is rung.
# When set to "None", no command will be executed.
# command = "<string>" | { program = "<string>", args = ["<string>",] }
command = "None"

[selection]
# This string contains all characters that are used as separators for "semantic words" in Alacritty.
semantic_escape_chars = ",â”‚`|:\"' ()[]{}<>\t"
# When set to true, selected text will be copied to the primary clipboard.
save_to_clipboard = true

[cursor]
# shape = "Block" | "Underline" | "Beam"
# blinking = "Never" | "Off" | "On" | "Always"
style = {shape = "Beam", blinking = "Always"}

# vi_mode_style = { <shape>, <blinking> } | "None"
vi_mode_style = "None"
# Cursor blinking interval in milliseconds.
blink_interval = 750
# Time after which cursor stops blinking, in seconds.
# Specifying 0 will disable timeout for blinking.
blink_timeout = 0
# When this is true, the cursor will be rendered as a hollow box when the window is not focused.
unfocused_hollow = true
# Thickness of the cursor relative to the cell width as floating point number from 0.0 to 1.0.
thickness = 0.15

[terminal]
# Controls the ability to write to the system clipboard with the OSC 52 escape sequence.
# While this escape sequence is useful to copy contents from the remote server, allowing
# any application to read from the clipboard can be easily abused while not providing
# significant benefits over explicitly pasting text.
# osc52 = "Disabled" | "OnlyCopy" | "OnlyPaste" | "CopyPaste"
osc52 = "OnlyCopy"

[mouse]
# When this is true, the cursor is temporarily hidden when typing.
hide_when_typing = false
# See keyboard.bindings for full documentation on mods, mode, action, and chars.
# When an application running within Alacritty captures the mouse, the `Shift` modifier can
# be used to suppress mouse reporting. If no action is found for the event, actions for the
# event without the `Shift` modifier are triggered instead.
# mouse = "Middle" | "Left" | "Right" | "Back" | "Forward" | <integer>
#       Mouse button which needs to be pressed to trigger this binding.
# action = <keyboard.bindings.action> | "ExpandSelection"
#       ExpandSelection
#               Expand the selection to the current mouse cursor location.
# bindings = [{ <mouse>, <mods>, <mode>, <action> | <chars> },]
bindings = [
    { mouse = "Right", mods = "Control", action = "Paste" },
]

# Terminal hints can be used to find text or hyperlinks in the visible part of the terminal
# and pipe it to other applications.
[hints]
# Keys used for the hint labels.
alphabet = "jfkdls;ahgurieowpq"
# Array with all available hints.
# Each hint must have at least one of regex or hyperlinks and either an action or a command.
# enabled = [{ <regex>, <hyperlinks>, <post_processing>, <persist>, <action>, <command> <binding>, <mouse> },]
#   Regex each line will be compared against
#       regex = "<string>"
#   When this is true, all OSC 8 escape sequence hyperlinks will be included in the hints
#       hyperlinks = true | false
#   When this is true, heuristics will be used to shorten the match if there are
#    characters likely not to be part of the hint (e.g. a trailing .). This is most
#    useful for URIs and applies only to regex matches.
#       post_processing = true | false
#   When this is true, hints remain persistent after selection.
#       persist = true | false
#   Copy the hint's text to the clipboard.
#   Paste the hint's text to the terminal or search.
#   Select the hint's text.
#   Move the vi mode cursor to the beginning of the hint.
#       action = "Copy" | "Paste" | "Select" | "MoveViModeCursor"
#   Command which will be executed when the hint is clicked or selected with the binding.
#   The hint's text is always attached as the last argument.
#       command = "<string>" | { program = "<string>", args = ["<string>",] }
#   See keyboard.bindings for documentation on available values.
#   This controls which key binding is used to start the keyboard hint selection process.
#       binding = { key = "<string>", mods = "<string>", mode = "<string>" }
#   See keyboard.bindings for documentation on available mods.
#   The enabled field controls if the hint should be underlined when hovering over the hint text with all mods pressed.
#       mouse = { mods = "<string>", enabled = true | false }
[[hints.enabled]]
# command = "xdg-open" # On Linux/BSD
# command = "open" # On macOS
command = { program = "cmd", args = [ "/c", "start", "" ] } # On Windows
hyperlinks = true
post_processing = true
persist = false
mouse.enabled = true
binding = { key = "U", mods = "Control|Shift" }
regex = "(ipfs:|ipns:|magnet:|mailto:|gemini://|gopher://|https://|http://|news:|file:|git://|ssh:|ftp://)[^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^âŸ¨âŸ©`]+"

[keyboard]
# bindings = [{ <key>, <mods>, <mode>, <action> | <chars> },]

# To unset a default binding, you can use the action "ReceiveChar" to remove it or "None" to inhibit any action.
# Multiple keybindings can be triggered by a single key press and will be executed in the order they are defined in.
# key = "<string>"
#       The regular keys like "A", "0", and "Ð¯" can be mapped directly without any
#       special syntax. Full list of named keys like "F1" and the syntax for dead keys can be found here:
#       https://docs.rs/winit/latest/winit/keyboard/enum.NamedKey.html
#       ttps://docs.rs/winit/latest/winit/keyboard/enum.Key.html#variant.Dead
#       Numpad keys are prefixed by Numpad: "NumpadEnter" | "NumpadAdd" | "NumpadComma"
#       | "NumpadDivide" | "NumpadEquals" | "NumpadSubtract" | "NumpadMultiply" | "Numpad[0-9]".
#       The key field also supports using scancodes, which are specified as a decimal number.

# mods = "Command" | "Control" | "Option" | "Super" | "Shift" | "Alt"
#       Multiple modifiers can be combined using |, like this: "Control | Shift".

# mode = "AppCursor" | "AppKeypad" | "Search" | "Alt" | "Vi"
#       This defines a terminal mode which must be active for this binding to have an effect.
#       Prepending ~ to a mode will require the mode to not = be active for the binding to take effect.
#       Multiple modes can be combined using |, like this: "~Vi|Search".

# chars = "<string>"
#       Writes the specified string to the terminal.

# action
#   ReceiveChar
#       Allow receiving char input.

#   None
#       No action.

#   Paste
#       Paste contents of system clipboard.

#   Copy
#       Store current selection into clipboard.

#   IncreaseFontSize
#       Increase font size.

#   DecreaseFontSize
#       Decrease font size.

#   ResetFontSize
#       Reset font size to the config value.

#   ScrollPageUp
#       Scroll exactly one page up.
#   ScrollPageDown

#   Scroll exactly one page down.

#   ScrollHalfPageUp
#       Scroll half a page up.

#   ScrollHalfPageDown
#       Scroll half a page down.

#   ScrollLineUp
#       Scroll one line up.

#   ScrollLineDown
#       Scroll one line down.

# ScrollToTop

# Scroll all the way to the top.

# ScrollToBottom

# Scroll all the way to the bottom.

# ClearHistory

# Clear the display buffer(s) to remove history.

# Hide

# Hide the Alacritty window.

# Minimize

# Minimize the Alacritty window.

# Quit

# Quit Alacritty.

# ClearLogNotice

# Clear warning and error notices.

# SpawnNewInstance

# Spawn a new instance of Alacritty.

# CreateNewWindow

# Create a new Alacritty window.

# ToggleFullscreen

# Toggle fullscreen.

# ToggleMaximized

# Toggle maximized.

# ClearSelection

# Clear active selection.

# ToggleViMode

# Toggle vi mode.

# SearchForward

# Start a forward buffer search.

# SearchBackward

# Start a backward buffer search.

# Vi mode actions:

# Up

# Move up.

# Down

# Move down.

# Left

# Move left.

# Right

# Move right.

# First

# First column, or beginning of the line when already at the first column.

# Last

# Last column, or beginning of the line when already at the last column.

# FirstOccupied

# First non-empty cell in this terminal row, or first non-empty cell of the line when already at the first cell of the row.

# High

# Move to top of screen.

# Middle

# Move to center of screen.

# Low

# Move to bottom of screen.

# SemanticLeft

# Move to start of semantically separated word.

# SemanticRight

# Move to start of next semantically separated word.

# SemanticLeftEnd

# Move to end of previous semantically separated word.

# SemanticRightEnd

# Move to end of semantically separated word.

# WordLeft

# Move to start of whitespace separated word.

# WordRight

# Move to start of next whitespace separated word.

# WordLeftEnd

# Move to end of previous whitespace separated word.

# WordRightEnd

# Move to end of whitespace separated word.

# Bracket

# Move to opposing bracket.

# ToggleNormalSelection

# Toggle normal vi selection.

# ToggleLineSelection

# Toggle line vi selection.

# ToggleBlockSelection

# Toggle block vi selection.

# ToggleSemanticSelection

# Toggle semantic vi selection.

# SearchNext

# Jump to the beginning of the next match.

# SearchPrevious

# Jump to the beginning of the previous match.

# SearchStart

# Jump to the next start of a match to the left of the origin.

# SearchEnd

# Jump to the next end of a match to the right of the origin.

# Open

# Launch the URL below the vi mode cursor.

# CenterAroundViCursor

# Centers the screen around the vi mode cursor.

# InlineSearchForward

# Search forward within the current line.

# InlineSearchBcakward

# Search backward within the current line.

# InlineSearchForwardShort

# Search forward within the current line, stopping just short of the character.

# InlineSearchBackwardShort

# Search backward within the current line, stopping just short of the character.

# InlineSearchNext

# Jump to the next inline search match.

# InlineSearchPrevious

# Jump to the previous inline search match.

# Search actions:

# SearchFocusNext

# Move the focus to the next search match.

# SearchFocusPrevious

# Move the focus to the previous search match.

# SearchConfirm

# Confirm the active search.

# SearchCancel

# Cancel the active search.

# SearchClear

# Reset the search regex.

# SearchDeleteWord

# Delete the last word in the search regex.

# SearchHistoryPrevious

# Go to the previous regex in the search history.

# SearchHistoryNext

# Go to the next regex in the search history.

# macOS exclusive:

# ToggleSimpleFullscreen

# Enter fullscreen without occupying another space.

# HideOtherApplications

# Hide all windows other than Alacritty.

# CreateNewTab

# Create new window in a tab.

# SelectNextTab

# Select next tab.

# SelectPreviousTab

# Select previous tab.

# SelectTab1

# Select the first tab.

# SelectTab2

# Select the second tab.

# SelectTab3

# Select the third tab.

# SelectTab4

# Select the fourth tab.

# SelectTab5

# Select the fifth tab.

# SelectTab6

# Select the sixth tab.

# SelectTab7

# Select the seventh tab.

# SelectTab8

# Select the eighth tab.

# SelectTab9

# Select the ninth tab.

# SelectLastTab

# Select the last tab.

# Linux/BSD exclusive:

# CopySelection

# Copy from the selection buffer.

# PasteSelection

# Paste from the selection buffer.
bindings = [
    { key = "N", mods = "Control|Shift", action = "CreateNewWindow" },
    { key = "L", mods = "Control|Shift", chars = "l" },
]
